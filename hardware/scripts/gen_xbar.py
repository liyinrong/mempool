#!/usr/bin/env python3
# Copyright 2024 ETH Zurich and University of Bologna.
# Licensed under the Apache License, Version 2.0, see LICENSE for details.
# SPDX-License-Identifier: Apache-2.0

import argparse
import sys
import math

license = """\
// Copyright 2024 ETH Zurich and University of Bologna.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
"""

script_path = "scripts/gen_xbar.py"


def gen_header(command):
    header = license
    header += '// Automatically generated by:\n'
    header += f'// {script_path} {command}\n'
    return header


def clog2(x):
    if x < 1:
        raise ValueError("clog2 is not defined for numbers less than 1")
    return math.ceil(math.log2(x))


def generate_crossbar(InNum, OutNum):
    # module_name = f"selector_{InNum}to{OutNum}"
    module_name = "selector"

    # Generate inputs and outputs
    inputs = ["input  logic [InNum-1:0] req_vector_i"]
    inputs.append("input  logic [$clog2(InNum)-1:0] priority_i")
    outputs = [
        "output logic [OutNum-1:0][$clog2(InNum)-1:0] sel_inport_idx_o",
        "output logic [InNum-1:0][$clog2(OutNum)-1:0] asn_outport_idx_o",
        "output logic [InNum-1:0]                     asn_outport_vld_o"
    ]

    # Generate the assertion
    assertion = (
        "initial begin\n"
        f"    assert (InNum == {InNum}) else "
        "$fatal(1, \n\"Parameter InNum does not "
        f"match expected value {InNum}\");\n"
        f"    assert (OutNum == {OutNum}) else "
        "$fatal(1, \n\"Parameter OutNum does not "
        f"match expected value {OutNum}\");\n"
        "end\n"
    )

    # Generate variable declaration
    declaration = (
        "logic [OutNum-1:0][$clog2(InNum)-1:0] sel_inport_idx_raw;\n"
        "logic [OutNum-1:0]                    sel_inport_idx_raw_vld;\n"
        "logic [InNum-1:0]                     req_vector_rotate;\n"
    )

    # Generate req_vector_i logic
    priority_logic = (
        "assign req_vector_rotate = (priority_i == '0) ? req_vector_i :\n"
        "                           "
        "((req_vector_i << (InNum -priority_i)) | "
        "(req_vector_i >> priority_i));\n"
    )

    # Generate output logic
    output_logic = (
        "\nalways_comb begin\n"
        "    for(int i = 0; i < OutNum; i++) begin\n"
        "        if(sel_inport_idx_raw[i] < (InNum - priority_i)) begin\n"
        "            sel_inport_idx_o[i] = sel_inport_idx_raw [i]\n"
        "                                + priority_i;\n"
        "        end else begin\n"
        "            sel_inport_idx_o[i] = sel_inport_idx_raw [i] - "
        "(InNum - priority_i);\n"
        "        end\n"
        "    end\n"
        "end\n"
        "\nalways_comb begin\n"
        "    asn_outport_idx_o = '0;\n"
        "    asn_outport_vld_o = '0;\n"
        "    for(int i = 0; i < OutNum; i++) begin\n"
        "        if(sel_inport_idx_raw_vld[i] == 1'b1) begin\n"
        "            asn_outport_idx_o[sel_inport_idx_o[i]] = i;\n"
        "            asn_outport_vld_o[sel_inport_idx_o[i]] = 1'b1;\n"
        "        end\n"
        "    end\n"
        "end\n"
    )

    # Generate switch case logic for crossbar
    switch_case = (
        "always_comb begin\n"
        "    sel_inport_idx_raw     = '0;\n"
        "    sel_inport_idx_raw_vld = '0;\n"
        "    case (req_vector_rotate)\n"
    )
    for i in range(2**InNum):
        case_str = bin(i)[2:].zfill(InNum)
        switch_case += f"        {InNum}'b{case_str}: begin\n"
        set_bits = [j for j in range(InNum) if case_str[InNum-1-j] == '1']
        for n in range(OutNum):
            if n < len(set_bits):
                bit_index = set_bits[n]
                clog_val = clog2(InNum)
                switch_case += (
                    f"            sel_inport_idx_raw[{n}] = "
                    f"{clog_val}'d{bit_index};\n"
                )
                switch_case += (
                    f"            sel_inport_idx_raw_vld[{n}] = 1'b1;\n"
                )
            else:
                clog_val = clog2(InNum)
                switch_case += (
                    f"            sel_inport_idx_raw[{n}] = "
                    f"{clog_val}'d0;\n"
                )
                switch_case += (
                    f"            sel_inport_idx_raw_vld[{n}] = 1'b0;\n"
                )
        switch_case += "        end\n"
    switch_case += "        default: /*do nothing */;\n"
    switch_case += "    endcase\n"
    switch_case += "end\n"

    # Generate final module
    sv_code = f"module {module_name} #(\n"
    sv_code += f"    parameter int InNum = {InNum},\n"
    sv_code += f"    parameter int OutNum = {OutNum}\n"
    sv_code += ") (\n"
    sv_code += "    " + ",\n    ".join(inputs)
    sv_code += ",\n"
    sv_code += "    " + ",\n    ".join(outputs)
    # sv_code += "".join(outputs)
    sv_code += "\n);\n\n"
    sv_code += assertion + "\n"
    sv_code += declaration + "\n"
    sv_code += priority_logic + "\n"
    sv_code += output_logic + "\n"
    sv_code += switch_case + "\n"
    sv_code += "endmodule\n"

    return sv_code


def main():
    # Validate and parse InNum and OutNum
    parser = argparse.ArgumentParser('gen_data', allow_abbrev=True)
    parser.add_argument(
        '-in',
        '--input_num',
        nargs='+',
        action='append',
        help='Input port number'
    )
    parser.add_argument(
        '-on',
        '--output_num',
        nargs='+',
        action='append',
        help='Output port number'
    )
    parser.add_argument(
        '-o',
        '--output',
        nargs=1,
        help='Output header file')

    args = parser.parse_args()
    file = args.output[0]

    # Generate SystemVerilog code
    print(f"\ninput_num={int(args.input_num[0][0])}, "
          f"output_num={int(args.output_num[0][0])}, output_dir={file}\n")
    input_num = int(args.input_num[0][0])
    output_num = int(args.output_num[0][0])
    sv_code = generate_crossbar(input_num, output_num)

    # Write the file
    with open(file, "w") as f:
        f.write(gen_header(' '.join(sys.argv[1:])))
        f.write(sv_code)


if __name__ == "__main__":
    main()
