// Copyright 2024 ETH Zurich and University of Bologna.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Automatically generated by:
// scripts/gen_xbar.py -in 5 -on 3 -o src/mempool_tile_resp_select.sv
module mempool_tile_resp_select #(
    parameter int InNum = 5,
    parameter int OutNum = 3
) (
    input  logic [InNum-1:0] req_vector_i,
    input  logic [$clog2(InNum)-1:0] priority_i,
    output logic [OutNum-1:0][$clog2(InNum)-1:0] sel_inport_idx_o,
    output logic [OutNum-1:0]                    sel_inport_idx_vld_o,
    output logic [InNum-1:0][$clog2(OutNum)-1:0] asn_outport_idx_o,
    output logic [InNum-1:0]                     asn_outport_vld_o
);

initial begin
    assert (InNum == 5) else $fatal(1, 
"Parameter InNum does not match expected value 5");
    assert (OutNum == 3) else $fatal(1, 
"Parameter OutNum does not match expected value 3");
end

logic [OutNum-1:0][$clog2(InNum)-1:0] sel_inport_idx_raw;
logic [OutNum-1:0]                    sel_inport_idx_raw_vld;
logic [InNum-1:0]                     req_vector_rotate;

assign sel_inport_idx_vld_o = sel_inport_idx_raw_vld ;
assign req_vector_rotate = (priority_i == '0) ? req_vector_i :
                           ((req_vector_i << (InNum -priority_i)) | (req_vector_i >> priority_i));


always_comb begin
    for(int i = 0; i < OutNum; i++) begin
        if(sel_inport_idx_raw[i] < (InNum - priority_i)) begin
            sel_inport_idx_o[i] = sel_inport_idx_raw [i]
                                + priority_i;
        end else begin
            sel_inport_idx_o[i] = sel_inport_idx_raw [i] - (InNum - priority_i);
        end
    end
end

always_comb begin
    asn_outport_idx_o = '0;
    asn_outport_vld_o = '0;
    for(int i = 0; i < OutNum; i++) begin
        if(sel_inport_idx_raw_vld[i] == 1'b1) begin
            asn_outport_idx_o[sel_inport_idx_o[i]] = i;
            asn_outport_vld_o[sel_inport_idx_o[i]] = 1'b1;
        end
    end
end

always_comb begin
    sel_inport_idx_raw     = '0;
    sel_inport_idx_raw_vld = '0;
    case (req_vector_rotate)
        5'b00000: begin
            sel_inport_idx_raw[0] = 3'd0;
            sel_inport_idx_raw_vld[0] = 1'b0;
            sel_inport_idx_raw[1] = 3'd0;
            sel_inport_idx_raw_vld[1] = 1'b0;
            sel_inport_idx_raw[2] = 3'd0;
            sel_inport_idx_raw_vld[2] = 1'b0;
        end
        5'b00001: begin
            sel_inport_idx_raw[0] = 3'd0;
            sel_inport_idx_raw_vld[0] = 1'b1;
            sel_inport_idx_raw[1] = 3'd0;
            sel_inport_idx_raw_vld[1] = 1'b0;
            sel_inport_idx_raw[2] = 3'd0;
            sel_inport_idx_raw_vld[2] = 1'b0;
        end
        5'b00010: begin
            sel_inport_idx_raw[0] = 3'd1;
            sel_inport_idx_raw_vld[0] = 1'b1;
            sel_inport_idx_raw[1] = 3'd0;
            sel_inport_idx_raw_vld[1] = 1'b0;
            sel_inport_idx_raw[2] = 3'd0;
            sel_inport_idx_raw_vld[2] = 1'b0;
        end
        5'b00011: begin
            sel_inport_idx_raw[0] = 3'd0;
            sel_inport_idx_raw_vld[0] = 1'b1;
            sel_inport_idx_raw[1] = 3'd1;
            sel_inport_idx_raw_vld[1] = 1'b1;
            sel_inport_idx_raw[2] = 3'd0;
            sel_inport_idx_raw_vld[2] = 1'b0;
        end
        5'b00100: begin
            sel_inport_idx_raw[0] = 3'd2;
            sel_inport_idx_raw_vld[0] = 1'b1;
            sel_inport_idx_raw[1] = 3'd0;
            sel_inport_idx_raw_vld[1] = 1'b0;
            sel_inport_idx_raw[2] = 3'd0;
            sel_inport_idx_raw_vld[2] = 1'b0;
        end
        5'b00101: begin
            sel_inport_idx_raw[0] = 3'd0;
            sel_inport_idx_raw_vld[0] = 1'b1;
            sel_inport_idx_raw[1] = 3'd2;
            sel_inport_idx_raw_vld[1] = 1'b1;
            sel_inport_idx_raw[2] = 3'd0;
            sel_inport_idx_raw_vld[2] = 1'b0;
        end
        5'b00110: begin
            sel_inport_idx_raw[0] = 3'd1;
            sel_inport_idx_raw_vld[0] = 1'b1;
            sel_inport_idx_raw[1] = 3'd2;
            sel_inport_idx_raw_vld[1] = 1'b1;
            sel_inport_idx_raw[2] = 3'd0;
            sel_inport_idx_raw_vld[2] = 1'b0;
        end
        5'b00111: begin
            sel_inport_idx_raw[0] = 3'd0;
            sel_inport_idx_raw_vld[0] = 1'b1;
            sel_inport_idx_raw[1] = 3'd1;
            sel_inport_idx_raw_vld[1] = 1'b1;
            sel_inport_idx_raw[2] = 3'd2;
            sel_inport_idx_raw_vld[2] = 1'b1;
        end
        5'b01000: begin
            sel_inport_idx_raw[0] = 3'd3;
            sel_inport_idx_raw_vld[0] = 1'b1;
            sel_inport_idx_raw[1] = 3'd0;
            sel_inport_idx_raw_vld[1] = 1'b0;
            sel_inport_idx_raw[2] = 3'd0;
            sel_inport_idx_raw_vld[2] = 1'b0;
        end
        5'b01001: begin
            sel_inport_idx_raw[0] = 3'd0;
            sel_inport_idx_raw_vld[0] = 1'b1;
            sel_inport_idx_raw[1] = 3'd3;
            sel_inport_idx_raw_vld[1] = 1'b1;
            sel_inport_idx_raw[2] = 3'd0;
            sel_inport_idx_raw_vld[2] = 1'b0;
        end
        5'b01010: begin
            sel_inport_idx_raw[0] = 3'd1;
            sel_inport_idx_raw_vld[0] = 1'b1;
            sel_inport_idx_raw[1] = 3'd3;
            sel_inport_idx_raw_vld[1] = 1'b1;
            sel_inport_idx_raw[2] = 3'd0;
            sel_inport_idx_raw_vld[2] = 1'b0;
        end
        5'b01011: begin
            sel_inport_idx_raw[0] = 3'd0;
            sel_inport_idx_raw_vld[0] = 1'b1;
            sel_inport_idx_raw[1] = 3'd1;
            sel_inport_idx_raw_vld[1] = 1'b1;
            sel_inport_idx_raw[2] = 3'd3;
            sel_inport_idx_raw_vld[2] = 1'b1;
        end
        5'b01100: begin
            sel_inport_idx_raw[0] = 3'd2;
            sel_inport_idx_raw_vld[0] = 1'b1;
            sel_inport_idx_raw[1] = 3'd3;
            sel_inport_idx_raw_vld[1] = 1'b1;
            sel_inport_idx_raw[2] = 3'd0;
            sel_inport_idx_raw_vld[2] = 1'b0;
        end
        5'b01101: begin
            sel_inport_idx_raw[0] = 3'd0;
            sel_inport_idx_raw_vld[0] = 1'b1;
            sel_inport_idx_raw[1] = 3'd2;
            sel_inport_idx_raw_vld[1] = 1'b1;
            sel_inport_idx_raw[2] = 3'd3;
            sel_inport_idx_raw_vld[2] = 1'b1;
        end
        5'b01110: begin
            sel_inport_idx_raw[0] = 3'd1;
            sel_inport_idx_raw_vld[0] = 1'b1;
            sel_inport_idx_raw[1] = 3'd2;
            sel_inport_idx_raw_vld[1] = 1'b1;
            sel_inport_idx_raw[2] = 3'd3;
            sel_inport_idx_raw_vld[2] = 1'b1;
        end
        5'b01111: begin
            sel_inport_idx_raw[0] = 3'd0;
            sel_inport_idx_raw_vld[0] = 1'b1;
            sel_inport_idx_raw[1] = 3'd1;
            sel_inport_idx_raw_vld[1] = 1'b1;
            sel_inport_idx_raw[2] = 3'd2;
            sel_inport_idx_raw_vld[2] = 1'b1;
        end
        5'b10000: begin
            sel_inport_idx_raw[0] = 3'd4;
            sel_inport_idx_raw_vld[0] = 1'b1;
            sel_inport_idx_raw[1] = 3'd0;
            sel_inport_idx_raw_vld[1] = 1'b0;
            sel_inport_idx_raw[2] = 3'd0;
            sel_inport_idx_raw_vld[2] = 1'b0;
        end
        5'b10001: begin
            sel_inport_idx_raw[0] = 3'd0;
            sel_inport_idx_raw_vld[0] = 1'b1;
            sel_inport_idx_raw[1] = 3'd4;
            sel_inport_idx_raw_vld[1] = 1'b1;
            sel_inport_idx_raw[2] = 3'd0;
            sel_inport_idx_raw_vld[2] = 1'b0;
        end
        5'b10010: begin
            sel_inport_idx_raw[0] = 3'd1;
            sel_inport_idx_raw_vld[0] = 1'b1;
            sel_inport_idx_raw[1] = 3'd4;
            sel_inport_idx_raw_vld[1] = 1'b1;
            sel_inport_idx_raw[2] = 3'd0;
            sel_inport_idx_raw_vld[2] = 1'b0;
        end
        5'b10011: begin
            sel_inport_idx_raw[0] = 3'd0;
            sel_inport_idx_raw_vld[0] = 1'b1;
            sel_inport_idx_raw[1] = 3'd1;
            sel_inport_idx_raw_vld[1] = 1'b1;
            sel_inport_idx_raw[2] = 3'd4;
            sel_inport_idx_raw_vld[2] = 1'b1;
        end
        5'b10100: begin
            sel_inport_idx_raw[0] = 3'd2;
            sel_inport_idx_raw_vld[0] = 1'b1;
            sel_inport_idx_raw[1] = 3'd4;
            sel_inport_idx_raw_vld[1] = 1'b1;
            sel_inport_idx_raw[2] = 3'd0;
            sel_inport_idx_raw_vld[2] = 1'b0;
        end
        5'b10101: begin
            sel_inport_idx_raw[0] = 3'd0;
            sel_inport_idx_raw_vld[0] = 1'b1;
            sel_inport_idx_raw[1] = 3'd2;
            sel_inport_idx_raw_vld[1] = 1'b1;
            sel_inport_idx_raw[2] = 3'd4;
            sel_inport_idx_raw_vld[2] = 1'b1;
        end
        5'b10110: begin
            sel_inport_idx_raw[0] = 3'd1;
            sel_inport_idx_raw_vld[0] = 1'b1;
            sel_inport_idx_raw[1] = 3'd2;
            sel_inport_idx_raw_vld[1] = 1'b1;
            sel_inport_idx_raw[2] = 3'd4;
            sel_inport_idx_raw_vld[2] = 1'b1;
        end
        5'b10111: begin
            sel_inport_idx_raw[0] = 3'd0;
            sel_inport_idx_raw_vld[0] = 1'b1;
            sel_inport_idx_raw[1] = 3'd1;
            sel_inport_idx_raw_vld[1] = 1'b1;
            sel_inport_idx_raw[2] = 3'd2;
            sel_inport_idx_raw_vld[2] = 1'b1;
        end
        5'b11000: begin
            sel_inport_idx_raw[0] = 3'd3;
            sel_inport_idx_raw_vld[0] = 1'b1;
            sel_inport_idx_raw[1] = 3'd4;
            sel_inport_idx_raw_vld[1] = 1'b1;
            sel_inport_idx_raw[2] = 3'd0;
            sel_inport_idx_raw_vld[2] = 1'b0;
        end
        5'b11001: begin
            sel_inport_idx_raw[0] = 3'd0;
            sel_inport_idx_raw_vld[0] = 1'b1;
            sel_inport_idx_raw[1] = 3'd3;
            sel_inport_idx_raw_vld[1] = 1'b1;
            sel_inport_idx_raw[2] = 3'd4;
            sel_inport_idx_raw_vld[2] = 1'b1;
        end
        5'b11010: begin
            sel_inport_idx_raw[0] = 3'd1;
            sel_inport_idx_raw_vld[0] = 1'b1;
            sel_inport_idx_raw[1] = 3'd3;
            sel_inport_idx_raw_vld[1] = 1'b1;
            sel_inport_idx_raw[2] = 3'd4;
            sel_inport_idx_raw_vld[2] = 1'b1;
        end
        5'b11011: begin
            sel_inport_idx_raw[0] = 3'd0;
            sel_inport_idx_raw_vld[0] = 1'b1;
            sel_inport_idx_raw[1] = 3'd1;
            sel_inport_idx_raw_vld[1] = 1'b1;
            sel_inport_idx_raw[2] = 3'd3;
            sel_inport_idx_raw_vld[2] = 1'b1;
        end
        5'b11100: begin
            sel_inport_idx_raw[0] = 3'd2;
            sel_inport_idx_raw_vld[0] = 1'b1;
            sel_inport_idx_raw[1] = 3'd3;
            sel_inport_idx_raw_vld[1] = 1'b1;
            sel_inport_idx_raw[2] = 3'd4;
            sel_inport_idx_raw_vld[2] = 1'b1;
        end
        5'b11101: begin
            sel_inport_idx_raw[0] = 3'd0;
            sel_inport_idx_raw_vld[0] = 1'b1;
            sel_inport_idx_raw[1] = 3'd2;
            sel_inport_idx_raw_vld[1] = 1'b1;
            sel_inport_idx_raw[2] = 3'd3;
            sel_inport_idx_raw_vld[2] = 1'b1;
        end
        5'b11110: begin
            sel_inport_idx_raw[0] = 3'd1;
            sel_inport_idx_raw_vld[0] = 1'b1;
            sel_inport_idx_raw[1] = 3'd2;
            sel_inport_idx_raw_vld[1] = 1'b1;
            sel_inport_idx_raw[2] = 3'd3;
            sel_inport_idx_raw_vld[2] = 1'b1;
        end
        5'b11111: begin
            sel_inport_idx_raw[0] = 3'd0;
            sel_inport_idx_raw_vld[0] = 1'b1;
            sel_inport_idx_raw[1] = 3'd1;
            sel_inport_idx_raw_vld[1] = 1'b1;
            sel_inport_idx_raw[2] = 3'd2;
            sel_inport_idx_raw_vld[2] = 1'b1;
        end
        default: /*do nothing */;
    endcase
end

endmodule
